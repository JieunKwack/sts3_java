url = 'http://www.stat.ufl.edu/~presnell/Courses/sta4504-2000sp/R/Data/crabs.dat'
data = read.table(url, stringsAsFactors = F)
head(data)
temp = data[1,]
data = data[-1,]
colnames(data)=temp
head(data)
str(data)
write.csv(data,'crab.csv',row.names=F)
data = read.csv('crab.csv', stringsAsFactors = F)
head(data)
y=data$satell
x=data$width
alpha=0
beta=0
epsilon = 0.0001
param = matrix(c(alpha,beta),nrow=2)
temp_param = matrix(c(100, 100), nrow=2)
while(t(param-temp_param)%*%(param-temp_param) > epsilon){
mu = exp(param[1,]+param[2,]*x)
dlda = sum(y-mu)
dldb = sum(x*(y-mu))
temp_param = param
inv_hessian = solve(matrix(c(sum(-mu),sum(-x*mu),sum(-x*mu),sum(-x^2*mu)),nrow=2))
param = param - inv_hessian %*% matrix(c(dlda,dldb),nrow=2)
}
param #alpha와 beta를 실제 추정한 값은 다음과 같다.
mu = exp(param[1,]+param[2,]*x)
#deviance구하기
deviance = 2*sum(y*log((y+0.00000001)/mu)-(y-mu))
deviance
#a
x = data$weight
y = ifelse(y>=1,1,0)
glm_fit = glm(y~x,family=gaussian(link='identity'))
predict(glm_fit,data.frame(x=5200))
#b
glm(y~x,family=binomial(link='identity'))
?glm
glm(y~x,family=binomial(link='identity'),start=10^-20)
glm(y~x,family=binomial(link='identity'),start=(10^-20,0)
glm(y~x,family=binomial(link='identity'),start=c(10^-20,0))
glm(y~x,family=binomial(link='identity'),start=c(10^-20,10^-20))
glm(y~x,family=binomial(link='identity'),start=c(0.000001,0.000001))
warnings()
glm(y~x,family=binomial(link='identity'),start=c(0.0001,0.0001))
glm(y~x,family=binomial(link='identity'),start=c(0.01,0.01))
glm(y~x,family=binomial(link='identity'),start=c(0.001,0.001))
glm(y~x,family=binomial(link='identity'),start=c(0.0001,0.0001))
glm(y~x,family=binomial(link='identity'),start=c(1e-20,1e-20))
glm(y~x,family=binomial(link='identity'),start=c(1e-30,1e-30))
D = c("A","B","C","D","E","F")
G = c("F","M")
WA = c(1,0) #1: Yes, 0: No
data = expand.grid(D,G,WA)
head(data)
data
D = c("A","B","C","D","E","F")
G = c("M","F")
WA = c(1,0) #1: Yes, 0: No
data = expand.grid(D,G,WA)
data
freq = c(512,353,120,138,53,22,
89,17,202,131,94,24,
313,207,205,279,138,351,
19,8,391,244,299,317)
data = c(data, freq)
daat
data
data = expand.grid(D,G,WA)
data
freq = c(512,353,120,138,53,22,
89,17,202,131,94,24,
313,207,205,279,138,351,
19,8,391,244,299,317)
freq = c(512,353,120,138,53,22,
89,17,202,131,94,24,
313,207,205,279,138,351,
19,8,391,244,299,317)
data
data = cbind(data, freq)
data
colnames(data)
class(data)
colnames(data) = c("D","G","WA","freq")
colnames(data)
head(data)
fit = glm(WA~D+G, data=data, family=binomial(link="logit"), weights="freq")
fit = glm(WA~D+G, data=data, family=binomial(link="logit"), weights=freq)
summary(fit)
#a
#데이터 생성
D = c("A","B","C","D","E","F")
G = c("M","F")
WA = c(1,0) #1: Yes, 0: No
data = expand.grid(D,G,WA)
data
freq = c(512,353,120,138,53,22,
89,17,202,131,94,24,
313,207,205,279,138,351,
19,8,391,244,299,317)
data = cbind(data, freq)
data
class(data)
colnames(data) = c("D","G","WA","freq")
head(data)
#glm 이용해 logit모형 적합
fit = glm(WA~D+G, data=data, family=binomial(link="logit"), weights=freq)
summary(fit)
D = c("A","B","C","D","E","F")
G = c("M","F")
A = c(1,0) #1: Yes, 0: No
data = expand.grid(D,G,WA)
data
freq = c(512,353,120,138,53,22,
89,17,202,131,94,24,
313,207,205,279,138,351,
19,8,391,244,299,317)
data = cbind(data, freq)
data
class(data)
colnames(data) = c("D","G","A","freq")
head(data)
fit = glm(WA~D+G, data=data, family=binomial(link="logit"), weights=freq)
summary(fit)
fit = glm(A~D+G, data=data, family=binomial(link="logit"), weights=freq)
summary(fit)
gc(ls=c())
rm(list=ls())
gc(reset=TRUE)
#6.5
#a
#데이터 생성
D = c("A","B","C","D","E","F")
G = c("M","F")
A = c(1,0) #1: Yes, 0: No
data = expand.grid(D,G,WA)
data
freq = c(512,353,120,138,53,22,
89,17,202,131,94,24,
313,207,205,279,138,351,
19,8,391,244,299,317)
data = cbind(data, freq)
data
class(data)
colnames(data) = c("D","G","A","freq")
head(data)
#glm 이용해 logit모형 적합
fit = glm(A~D+G, data=data, family=binomial(link="logit"), weights=freq)
summary(fit)
class(data)
data = data.frame(cbind(data, freq))
class(data)
class(data)
colnames(data) = c("D","G","A","freq")
colnames(data)
D = c("A","B","C","D","E","F")
G = c("M","F")
A = c(1,0) #1: Yes, 0: No
data = expand.grid(D,G,WA)
data = expand.grid(D,G,A)
freq = c(512,353,120,138,53,22,
89,17,202,131,94,24,
313,207,205,279,138,351,
19,8,391,244,299,317)
data = data.frame(cbind(data, freq))
colnames(data)
colnames(data) = c("D","G","A","freq")
head(data)
fit = glm(A~D+G, data=data, family=binomial(link="logit"), weights=freq)
summary(fit)
rm(list=ls())
gc(reset=TRUE)
#6.5
#a
#데이터 생성
D = c("A","B","C","D","E","F")
G = c("M","F")
A = c(1,0) #1: Yes, 0: No
data = expand.grid(D,G,A)
freq = c(512,353,120,138,53,22,
89,17,202,131,94,24,
313,207,205,279,138,351,
19,8,391,244,299,317)
data = data.frame(cbind(data, freq))
colnames(data) = c("D","G","A","freq")
head(data)
#glm 이용해 logit모형 적합
fit = glm(A~D+G, data=data, family=binomial(link="logit"), weights=freq)
summary(fit)
D_A_OR = (512*19)/(313*89)
D_B_OR = (353*8)/(207*17)
D_C_OR = (120*391)/(205*202)
D_D_OR = (138*244)/(279*131)
D_E_OR = (53*299)/(138*94)
D_F_OR = (22*317)/(351*24)
head(data)
sum(data$G=="M"&data$A==1)
data$G=="M"&data$A==1
data[data$G=="M"&data$A==1]
sum(data[,data$G=="M"&data$A==1])
sum(data[data$G=="M"&data$A==1,])
vector(data$G=="M"&data$A==1)
as.vector(data$G=="M"&data$A==1)
data[as.vector(data$G=="M"&data$A==1)]
sum(data[(data$G=="M"&data$A==1)==TRUE])
data[(data$G=="M"&data$A==1)==TRUE]
data$(data$G=="M"&data$A==1)
data$G=="M"&data$A==1
data$G=="M"
data$G=="M"
class(data$G=="M")
binary(data$G=="M")
as.binary(data$G=="M")
index(data$G=="M")
Vectorize(data$G=="M")
class(data$G)
class(data$G=="M")
factor(data$G=="M")
data[factor(data$G=="M")]
data[factor(data$G=="M"),]
D_B_OR = exp(-0.04340)
D_C_OR = exp(-1.2626)
D_D_OR = exp(-1.29461)
D_E_OR = exp(-1.73931)
D_F_OR = exp(-3.30648)
data[factor(data$G=="M")]
factor(data$G=="M")
summary(fit)
exp(0.09987)
data[data$G=="M"&data$A==1,
]
sum(data[(data$G=="M"&data$A==1),])
data[(data$G=="M"&data$A==1),]
data[data$G=="M"&data$A==1,]
sum(data[data$G=="M"&data$A==1,]$freq)
sum(data[data$G=="M"&data$A==0,]$freq)
sum(data[data$G=="F"&data$A==1,]$freq)
sum(data[data$G=="F"&data$A==0,]$freq)
c(sum(data[data$G=="M"&data$A==1,]$freq),
sum(data[data$G=="M"&data$A==0,]$freq),
sum(data[data$G=="F"&data$A==1,]$freq),
sum(data[data$G=="F"&data$A==0,]$freq))
marginal = c(sum(data[data$G=="M"&data$A==1,]$freq),
sum(data[data$G=="M"&data$A==0,]$freq),
sum(data[data$G=="F"&data$A==1,]$freq),
sum(data[data$G=="F"&data$A==0,]$freq))
marginal
marginal = matrix(marginal, byrow=T, nrow=2)
marginal
marginal = matrix(marginal, byrow=F, nrow=2)
marginal
marginal = c(sum(data[data$G=="M"&data$A==1,]$freq),
sum(data[data$G=="M"&data$A==0,]$freq),
sum(data[data$G=="F"&data$A==1,]$freq),
sum(data[data$G=="F"&data$A==0,]$freq))
marginal = matrix(marginal, byrow=F, nrow=2)
marginal
marginal = c(sum(data[data$G=="M"&data$A==1,]$freq),
sum(data[data$G=="M"&data$A==0,]$freq),
sum(data[data$G=="F"&data$A==1,]$freq),
sum(data[data$G=="F"&data$A==0,]$freq))
marginal = matrix(marginal, byrow=T, nrow=2)
marginal
marginal = c(sum(data[data$G=="M"&data$A==1,]$freq),
sum(data[data$G=="M"&data$A==0,]$freq),
sum(data[data$G=="F"&data$A==1,]$freq),
sum(data[data$G=="F"&data$A==0,]$freq))
marginal = data.frame(matrix(marginal, byrow=T, nrow=2))
marginal
colnames(marginal)
colnames(marginal) = c(1,0)
marginal
marginal = matrix(marginal, byrow=T, nrow=2)
marginal
marginal = c(sum(data[data$G=="M"&data$A==1,]$freq),
sum(data[data$G=="M"&data$A==0,]$freq),
sum(data[data$G=="F"&data$A==1,]$freq),
sum(data[data$G=="F"&data$A==0,]$freq))
marginal = matrix(marginal, byrow=T, nrow=2)
marginal
marginal_OR = (marginal[1,1]*marginal[2,2])/(marginal[1,2]*marginal[2,1])
marginal_OR
fit2 = glm(A~G, data=data, family=binomial(link="logit"), weights=freq)
summary(fit2)
dev = fit2$deviance - fit$deviance
dev
qchisq(0.95,5)
#AG conditional OR
exp(0.09987)
#Marginal OR
head(data)
marginal = c(sum(data[data$G=="M"&data$A==1,]$freq),
sum(data[data$G=="M"&data$A==0,]$freq),
sum(data[data$G=="F"&data$A==1,]$freq),
sum(data[data$G=="F"&data$A==0,]$freq))
marginal = matrix(marginal, byrow=T, nrow=2)
marginal
marginal_OR = (marginal[1,1]*marginal[2,2])/(marginal[1,2]*marginal[2,1])
marginal_OR
#GOF
fit2 = glm(A~G, data=data, family=binomial(link="logit"), weights=freq)
summary(fit2)
dev = fit2$deviance - fit$deviance
dev
qchisq(0.95,5)
fit = glm(A~D,data=data,family = binomial(link="logit"), weights=freq)
summary(fit)
?anova
anova(glmfit, test="chisq")
anova(fit, test="chisq")
anova(fit, test="Chisq")
fit$residuals
summary(fit)
fit$residuals
sum(fit$residuals)
anova(fit, test="Chisq")
data = expand.grid(VR,DR,DP)
data
VR = c("w","b")
DR = c("w","b")
DP = c(1,0)
data = expand.grid(VR,DR,DP)
data
freq = c(53,0,11,4,
414,16,37,139)
data = cbind(data, freq)
data
fit = glm(DP~VR+DR, data=data, family = binomial(link="logit"), weights=freq)
colnames(data)
colnames(data) = c("VR","DR","DP","freq")
data
fit = glm(DP~VR+DR, data=data, family = binomial(link="logit"), weights=freq)
summary(fit)
exp(-2.4044)
qchisq(0.95,1)
cmh.test(data)
load("lawsta")
load("lawstat")
install.packages("lawstat")
library("lawstat")
cmh.test(data)
?cmh.test
data("blackhire")
head(blackhire)
blackhire
data[data$DR="w",]
data[data$DR=="w",]
data[data$DR="b",]
data[data$DR=="b",]
?table
?numeric
matrix(data[data$DR=="w",], nrow=2)
data[data$DR=="w",]
matrix(data[data$DR=="w",], nrow=2)
matrix(data[data$DR=="w",]$freq, nrow=2)
cmh.test(matrix(data[data$DR=="w",]$freq, nrow=2))
?matrix
?cmh.test
?array
temp = matrix(0, c(2,2,2))
temp
class(temp)
temp = array(0, c(2,2,2))
temp
temp[,,1]=matrix(data[data$DR=="w",]$freq, nrow=2)
temp[,,2]=matrix(data[data$DR=="b",]$freq, nrow=2)
temp
cmh.test(temp)
658004 %61
658004 %%61
10+5+5+5+2+3+2+5+12+3+5+5
8+5+5+5+5+3+5+5+12+3+1+8
getwd()
setwd("C:/Users/monster/Documents/연구/데이터")
setwd("C:/Users/monster/Documents/연구/데이터/UCR_TS_Archive_2015/UCR_TS_Archive_2015 - 복사본")
list = dir()
list
for (i in list)
i
{
setwd(path + i)
files = dir()
}
list
i="50words"
setwd(path + i)
path = "C:/Users/monster/Documents/연구/데이터/UCR_TS_Archive_2015/UCR_TS_Archive_2015 - 복사본"
setwd(path +"/"+ i)
pwd = path("C:/Users/monster/Documents/연구/데이터/UCR_TS_Archive_2015/UCR_TS_Archive_2015 - 복사본")
path +"/"
setwd(file.path(path +"/"+ i))
pwd = path("C:/Users/monster/Documents/연구/데이터/UCR_TS_Archive_2015/UCR_TS_Archive_2015 - 복사본/")
pwd = file.path("C:/Users/monster/Documents/연구/데이터/UCR_TS_Archive_2015/UCR_TS_Archive_2015 - 복사본/")
pwd+ i
pwd + file.path(i)
path.expand(i)
pwd = path.expand(i)
pwd
pwd = file.path("C:/Users/monster/Documents/연구/데이터/UCR_TS_Archive_2015/UCR_TS_Archive_2015 - 복사본/")
pwd = path.expand(pwd + i)
pwd = "C:/Users/monster/Documents/연구/데이터/UCR_TS_Archive_2015/UCR_TS_Archive_2015 - 복사본/"
pwd + i
paste(pwd,i)
paste(pwd,i,sep = "")
setwd(paste(pwd,i,sep = ""))
files = dir()
files
paste0(pwd,i)
files.rename(list.files(pattern="*", paste0(*,".csv")))
files.rename(list.files(pattern="*", paste0("*",".csv")))
file.rename(files.files(pattern="*", paste0("*",".csv")))
file.rename(list.files(pattern="*", paste0("*",".csv")))
?list.files
file.rename(list.files(path=paste0(pwd,i), pattern="*", paste0("*",".csv")))
path = "C:/Users/monster/Documents/연구/데이터/UCR_TS_Archive_2015/UCR_TS_Archive_2015 - 복사본/"
files = list.files(path=file.path(path,i), full.names=TRUE)
files
file.rename(from =file.path(pwd,i), to = file.path(pwd,i,".csv"))
files = list.files(path=file.path(path,i), full.names=TRUE)
files
?file.path
file.rename(from =file.path(pwd,i), to = file.path(pwd,i,".csv"))
file.rename(from =file.path(pwd,i), to = file.path(pwd,i)
)
?file.rename
path = "C:/Users/monster/Documents/연구/데이터/UCR_TS_Archive_2015/UCR_TS_Archive_2015 - 복사본"
i="50words"
files = list.files(path=file.path(path,i), full.names=TRUE)
files
file.rename(from =file.path(pwd,i), to = file.path(pwd,i,".csv"))
file.path(pwd,i,".csv")
file.path(path,i)
i+".csv"
paste0(i+".csv")
paste0(i,".csv")
file.path(pwd,paste0(i,".csv")
)
file.rename(from =file.path(path,i), to = file.path(path,paste0(i,".csv")))
files = list.files(path=file.path(path,i), full.names=TRUE)
files
files = list.files(path=file.path(path,i), full.names=TRUE)
new = paste0(files, ".csv")
files
new
file.rename(from = files, to = new
)
files = list.files(path=file.path(path,i), full.names=TRUE)
files
file.rename(from = new, to = files)
list
for (i in list)
{
files = list.files(path=file.path(path,i), full.names=TRUE)
new = paste0(files, ".csv")
file.rename(from = files, to = new)
}
print(files)
for (i in list)
{
print(list.files(path=file.path(path,i), full.names=TRUE))
}
